{
	"info": {
		"_postman_id": "5bb41c7d-cc72-4dc9-a1ef-06bd922a9e5b",
		"name": "HW2 Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20854761",
		"_collection_link": "https://lively-flare-117429.postman.co/workspace/Team-Workspace~66b35559-e9d1-40a1-893d-8933343a2101/collection/20854761-5bb41c7d-cc72-4dc9-a1ef-06bd922a9e5b?action=share&creator=20854761&source=collection_link"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в response равно name s request (name вбить руками.)\r",
							"pm.test(\"My_name Andrey\", function () {\r",
							"    var My_name = pm.response.json();\r",
							"pm.expect(My_name.name).to.eql(\"Andrey\");\r",
							"console.log(\"My_name\",My_name.name, typeof My_name.name)\r",
							"});\r",
							"\r",
							"//Проверить, что age в response равно age s request (age вбить руками.)\r",
							"pm.test(\"My_age 30\", function () {\r",
							"    var My_age = pm.response.json();\r",
							"pm.expect(My_age.age).to.eql(\"30\");\r",
							"console.log(\"My_age  \",My_age.age, typeof My_age.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в response равно salary s request (salary вбить руками.)\r",
							"pm.test(\"My_salary 2000\", function () {\r",
							"    var My_salary = pm.response.json();\r",
							"pm.expect(My_salary.salary).to.eql(3000);\r",
							"console.log(\"My_salary  \",My_salary.salary, typeof My_salary.salary)\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"var req = request.data\r",
							"\r",
							"//Проверить, что name в response равно name s request (name забрать из request.)\r",
							"var req_name = request.name\r",
							"pm.test(\"My_name Andrey\", function () {\r",
							"    var My_name = pm.response.json();\r",
							"    pm.expect(My_name.name).to.eql(req.name);\r",
							"    console.log(\"Req name  \" , req.name, typeof req.name)\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в response равно age s request (age забрать из request.)\r",
							"var req_age = request.age\r",
							"pm.test(\"My_age\", function () {\r",
							"    var My_age = pm.response.json();\r",
							"    pm.expect(My_age.age).to.eql(req.age);\r",
							"    console.log(\"Req My_age  \", req.age, typeof +req.age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в response равно salary s request (salary забрать из request.)\r",
							"var req_salary = request.salary\r",
							"pm.test(\"My_salary\", function () {\r",
							"    var My_salary = pm.response.json();\r",
							"    pm.expect(My_salary.salary).to.eql+(req.salary);\r",
							"    console.log(\"Req My_salary  \" +req.salary, typeof +req.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"var family = JSON.parse(responseBody);\r",
							"console.log (\"family  \", family.family, typeof family.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в response равно salary*4 (salary забрать из request)\r",
							"var u_salary_1_5_year = request.salary\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function () {\r",
							"    var my_salary = pm.response.json();\r",
							"    pm.expect(family.salary*4).to.eql(req.salary*4);\r",
							"    console.log (\"u_salary_1_5_year = \" ,jsonData.family.u_salary_1_5_year,typeof jsonData.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Andrey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Third",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"var jsonData = JSON.parse(responseBody)\r",
							"\r",
							"//Спарсить request.\r",
							"var params = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"Name in response eql name in request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(params.name);\r",
							"    console.log(\"Name in response eql name in request\",params.name, typeof params.name );\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"Age in response eql name in request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(params.age);\r",
							"    console.log(\"Age in response eql name in request\",params.age, typeof params.age);\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							" pm.test(\"Salary in response eql name in request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql+(params.salary);\r",
							"    console.log(\"Salary in response eql salary in request\",params.salary, typeof params.salary );\r",
							"});\r",
							"\r",
							" //Вывести в консоль параметр family из response.\r",
							"console.log (\"Family \", jsonData.family)\r",
							"\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"name\")\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", () => {\r",
							"    pm.expect(jsonData.family.pets.dog).haveOwnProperty(\"age\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog name_Luky\", function () {\r",
							"    var dog_name = pm.response.json();\r",
							"    pm.expect(dog_name.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log(\"Dog name\",dog_name.family.pets.dog.name, typeof dog_name.family.pets.dog.name)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age\", function () {\r",
							"    var dog_age = pm.response.json();\r",
							"    pm.expect(dog_age.family.pets.dog.age).to.eql(4);\r",
							"    console.log(\"Dog_age\",dog_age.family.pets.dog.age, typeof dog_age.family.pets.dog.age)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Andrey&age=30&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fourth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"pm.environment.get(\"variable_key\");\r",
							"var jsonData = JSON.parse(responseBody)\r",
							"\r",
							"////Спарсить request.\r",
							"var params = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"Name in response eql name in request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(params.name);\r",
							"    console.log(\"Name in response eql name in request\",params.name, typeof params.name );\r",
							"});\r",
							"\r",
							"//. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"    pm.test(\"Age in response eql age in request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql+(params.age);\r",
							"    console.log(\"Age in response eql age in request\",params.age, typeof params.age );\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request\",+params.salary, typeof params.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"var response_salary = JSON.parse(responseBody)\r",
							"console.log(\"Salary from response\", response_salary.salary, typeof response_salary.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Item-0 from salary\",response_salary.salary[0], typeof response_salary.salary)\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Item-1 from salary\",response_salary.salary[1], typeof response_salary.salary)\r",
							"\r",
							"//вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Item-2 from salary\",response_salary.salary[2], typeof response_salary.salary)\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary = request salary\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql+(params.salary);\r",
							"    console.log(\"Salary [0] =\",params.salary, typeof +params.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary = request salary *2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql+(params.salary*2);\r",
							"     console.log(\"Salary [1] =\",params.salary*2, typeof +params.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary = request salary *3\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql+(params.salary*3);\r",
							"     console.log(\"Salary [2] =\",params.salary*3, typeof +params.salary)\r",
							"});\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"var name = params.name;\r",
							"pm.environment.get(\"name\",name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"var age = params.age;\r",
							"pm.environment.get (\"age\",age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"var salary = params.salary[0];\r",
							"pm.environment.get (\"salary\",salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for ( var i = 0; i < jsonData.salary.length ; i++) { \r",
							"    console.log(jsonData.salary[i]) \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=30&salary=3000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fifth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"var resp = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"var req = request.data\r",
							"\r",
							"\r",
							"////Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start_qa_salary\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"start_qa_salary\")\r",
							"    console.log(\"Start_qa_salary\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Qa_salary_ after_6_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_6_months\")\r",
							"    console.log(\"Qa_salary_after_6_months\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"////Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Qa_salary_ after_12_months\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_12_months\")\r",
							"    console.log(\"Qa_salary_after_12_months\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Qa_salary_ after_1.5_year\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_1.5_year\")\r",
							"    console.log(\"Qa_salary_after_1.5_year\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"////Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Qa_salary_ after_3.5_years\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"qa_salary_after_3.5_years\")\r",
							"    console.log(\"Qa_salary_after_3.5_years\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person\", function () {\r",
							"    pm.expect(resp).haveOwnProperty(\"person\")\r",
							"    console.log(\"Person\", resp, typeof resp)\r",
							"});\r",
							"\r",
							"////Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Start_qa_salary_resp=start_qa_salary_req\", function () {\r",
							"    pm.expect(\"start_qa_salary\").to.eql+(req.salary);\r",
							"    console.log(\"Start_qa_salary_resp=start_qa_salary_req\",req.salary*1, typeof +req.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_6_months_resp=qa_salary_after_6_months_req\", function () {\r",
							"    pm.expect(\"qa_salary_after_6_months\").to.eql+(req.salary*2);\r",
							"    console.log(\"Qa_salary_after_6_months_resp=qa_salary_after_6_months_req\",req.salary*2, typeof +req.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_12_months_resp=qa_salary_after_12_months_req\", function () {\r",
							"    pm.expect(\"Qa_salary_after_12_months\").to.eql+(req.salary*(2.7));\r",
							"    console.log(\"Qa_salary_after_12_months_resp=qa_salary_after_12_months_req\",req.salary*(2.7), typeof +req.salary)\r",
							"});\r",
							"////17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request ///(salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_1.5_year_resp=qa_salary_after_1.5_year_req\", function () {\r",
							"    pm.expect(\"Qa_salary_after_1.5_year\").to.eql+(req.salary*(3.3));\r",
							"    console.log(\"Qa_salary_after_1.5_year_resp=qa_salary_after_1.5_year_req\",req.salary*(3.3), typeof +req.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_3.5_year_resp=qa_salary_after_3.5_year_req\", function () {\r",
							"    pm.expect(\"Qa_salary_after_3.5_year\").to.eql+(req.salary*(3.8));\r",
							"    console.log(\"Qa_salary_after_3.5_year_resp=qa_salary_after_3.5_year_req\",req.salary*(3.8), typeof +req.salary)\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"U_name[1]_resp=salary_req\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"    console.log(\"U_name[1]_resp=salary_req\",req.salary, typeof +req.salary )\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"U_age_resp=u_age_req\", function(){\r",
							"    pm.expect(resp.person.u_age).to.eql+(req.age)\r",
							"    console.log(\"U_age_resp=u_age_req\",req.age, typeof +req.age)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Qa_salary_after_5_year_resp=qa_salary_after_5_year_req\", function () {\r",
							"    pm.expect(\"Qa_salary_after_5_year\").to.eql+(req.salary*(4.2));\r",
							"    console.log(\"Qa_salary_after_5_year_resp=qa_salary_after_5_year_req\",req.salary*(4.2), typeof +req.salary)\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let i in resp.person)\r",
							"    { \r",
							"    console.log(i)\r",
							"    console.log(resp.person[i])\r",
							"    }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
	        }
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72:5005"
		},
		{
			"key": "name",
			"value": "Andrey"
		},
		{
			"key": "age",
			"value": "30"
		},
		{
			"key": "salary",
			"value": "3000"
		}
	]
}
